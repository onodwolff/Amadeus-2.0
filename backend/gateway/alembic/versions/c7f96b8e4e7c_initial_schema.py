"""Initial database schema for the Amadeus gateway."""
from __future__ import annotations

import sys
import types
from importlib import metadata as importlib_metadata
from pathlib import Path

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

CURRENT_DIR = Path(__file__).resolve()
BACKEND_DIR = CURRENT_DIR.parents[2]
REPO_ROOT = BACKEND_DIR.parent

for path_entry in (REPO_ROOT, BACKEND_DIR):
    if str(path_entry) not in sys.path:
        sys.path.append(str(path_entry))


def _install_logging_stub() -> None:
    stub = types.ModuleType("gateway.app.logging")
    stub.setup_logging = lambda *_, **__: None  # type: ignore[attr-defined]
    stub.bind_contextvars = lambda **__: None  # type: ignore[attr-defined]
    stub.clear_contextvars = lambda: None  # type: ignore[attr-defined]
    stub.get_logger = lambda *_: None  # type: ignore[attr-defined]
    sys.modules.setdefault("gateway.app.logging", stub)
    sys.modules.setdefault("backend.gateway.app.logging", stub)


def _install_email_validator_stub() -> None:
    try:
        importlib_metadata.version("email-validator")
        return
    except importlib_metadata.PackageNotFoundError:
        pass

    module = types.ModuleType("email_validator")
    module.__all__ = ["validate_email", "EmailNotValidError"]
    module.__version__ = "2.0.0"

    class EmailNotValidError(ValueError):
        pass

    def validate_email(value: str, *args, **kwargs):  # type: ignore[unused-arg]
        return types.SimpleNamespace(email=value)

    module.EmailNotValidError = EmailNotValidError  # type: ignore[attr-defined]
    module.validate_email = validate_email  # type: ignore[attr-defined]
    sys.modules.setdefault("email_validator", module)

    if not getattr(importlib_metadata, "_email_validator_stub_installed", False):
        original_version = importlib_metadata.version

        def _version(package_name: str) -> str:
            if package_name == "email-validator":
                return module.__version__
            return original_version(package_name)

        importlib_metadata.version = _version  # type: ignore[assignment]
        importlib_metadata._email_validator_stub_installed = True  # type: ignore[attr-defined]


_install_logging_stub()
_install_email_validator_stub()

try:
    import gateway  # type: ignore[import-not-found]
except ModuleNotFoundError:  # pragma: no cover - support running from backend/
    import backend.gateway as gateway  # type: ignore[no-redef]


try:
    from gateway.config import settings
except ModuleNotFoundError:  # pragma: no cover
    from backend.gateway.config import settings  # type: ignore


revision = "c7f96b8e4e7c"
down_revision = None
branch_labels = None
depends_on = None

SCHEMA = settings.storage.schema



def _has_citext_extension(bind) -> bool:
    if bind.dialect.name != "postgresql":
        return True
    result = bind.exec_driver_sql(
        "SELECT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'citext')"
    )
    return bool(result.scalar())



def _ensure_citext_extension(bind) -> bool:
    if bind.dialect.name != "postgresql":
        return True
    if _has_citext_extension(bind):
        return True
    try:
        bind.exec_driver_sql("CREATE EXTENSION IF NOT EXISTS citext")
    except ProgrammingError:
        return False
    return _has_citext_extension(bind)

def upgrade() -> None:
    bind = op.get_bind()
    _ensure_citext_extension(bind)
    op.execute(
        """
    DO $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'backtest_run_status') THEN
        CREATE TYPE backtest_run_status AS ENUM ('pending','running','completed','failed');
      ELSE
        IF NOT EXISTS (
          SELECT 1
          FROM pg_enum e
          JOIN pg_type t ON t.oid = e.enumtypid
          WHERE t.typname='backtest_run_status' AND e.enumlabel='pending'
        ) THEN
          ALTER TYPE backtest_run_status ADD VALUE 'pending';
        END IF;
      END IF;
    END
    $$;
    """
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('backtest_runs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('plan', sa.String(length=32), nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'running', 'completed', 'failed', name='backtest_run_status', create_type=False), server_default='pending', nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('base_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('optimisation_metric', sa.String(length=64), nullable=True),
    sa.Column('optimisation_direction', sa.String(length=16), nullable=True),
    sa.Column('optimisation_score', sa.Numeric(precision=20, scale=10), nullable=True),
    sa.Column('node_id', sa.String(length=64), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_backtest_runs')),
    sa.UniqueConstraint('run_id', 'position', name='uq_backtest_runs_run_id_position'),
    schema=SCHEMA
    )
    op.create_index('ix_backtest_runs_run_id', 'backtest_runs', ['run_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_backtest_runs_status', 'backtest_runs', ['status'], unique=False, schema=SCHEMA)
    op.create_table('historical_datasets',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dataset_id', sa.String(length=160), nullable=False),
    sa.Column('fingerprint', sa.String(length=160), nullable=False),
    sa.Column('venue', sa.String(length=64), nullable=False),
    sa.Column('instrument', sa.String(length=128), nullable=False),
    sa.Column('timeframe', sa.String(length=32), nullable=False),
    sa.Column('date_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('date_to', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'READY', 'FAILED', name='historical_data_status'), server_default='PENDING', nullable=False),
    sa.Column('source', sa.String(length=64), nullable=True),
    sa.Column('path', sa.String(length=255), nullable=True),
    sa.Column('size_bytes', sa.Integer(), nullable=True),
    sa.Column('rows', sa.Integer(), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_historical_datasets')),
    sa.UniqueConstraint('fingerprint', name=op.f('uq_historical_datasets_fingerprint')),
    schema=SCHEMA
    )
    op.create_index('ix_historical_datasets_created_at', 'historical_datasets', ['created_at'], unique=False, schema=SCHEMA)
    op.create_index('ix_historical_datasets_dataset_id', 'historical_datasets', ['dataset_id'], unique=True, schema=SCHEMA)
    op.create_index('ix_historical_datasets_fingerprint', 'historical_datasets', ['fingerprint'], unique=True, schema=SCHEMA)
    op.create_index('ix_historical_datasets_status', 'historical_datasets', ['status'], unique=False, schema=SCHEMA)
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_permissions')),
    sa.UniqueConstraint('code', name=op.f('uq_permissions_code')),
    schema=SCHEMA
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('slug', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('slug', name=op.f('uq_roles_slug')),
    schema=SCHEMA
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', gateway.db.models.CaseInsensitiveText(length=320), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('pwd_hash', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), server_default=sa.text('(true)'), nullable=False),
    sa.Column('email_verified', sa.Boolean(), server_default=sa.text('(false)'), nullable=False),
    sa.Column('mfa_enabled', sa.Boolean(), server_default=sa.text('(false)'), nullable=False),
    sa.Column('mfa_secret', sa.Text(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username')),
    schema=SCHEMA
    )
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('venue', sa.String(length=64), nullable=False),
    sa.Column('label', sa.String(length=120), nullable=True),
    sa.Column('key_id', sa.String(length=128), nullable=False),
    sa.Column('api_key_masked', sa.String(length=128), nullable=False),
    sa.Column('secret_enc', sa.LargeBinary(), nullable=False),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('[]'::jsonb)"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_api_keys_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_keys')),
    sa.UniqueConstraint('key_id', name='uq_api_keys_key_id'),
    schema=SCHEMA
    )
    op.create_index('ix_api_keys_created_at', 'api_keys', ['created_at'], unique=False, schema=SCHEMA)
    op.create_index('ix_api_keys_user_id', 'api_keys', ['user_id'], unique=False, schema=SCHEMA)
    op.create_table('auth_sessions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('refresh_token_hash', sa.String(length=128), nullable=False),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_auth_sessions_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_auth_sessions')),
    sa.UniqueConstraint('refresh_token_hash', name=op.f('uq_auth_sessions_refresh_token_hash')),
    schema=SCHEMA
    )
    op.create_table('backtest_results',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_key', sa.String(length=64), nullable=False),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_return', sa.Numeric(precision=20, scale=10), nullable=True),
    sa.Column('sharpe_ratio', sa.Numeric(precision=20, scale=10), nullable=True),
    sa.Column('max_drawdown', sa.Numeric(precision=20, scale=10), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['public.historical_datasets.id'], name=op.f('fk_backtest_results_dataset_id_historical_datasets'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_backtest_results')),
    sa.UniqueConstraint('node_key', name=op.f('uq_backtest_results_node_key')),
    schema=SCHEMA
    )
    op.create_index('ix_backtest_results_dataset_id', 'backtest_results', ['dataset_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_backtest_results_node_key', 'backtest_results', ['node_key'], unique=True, schema=SCHEMA)
    op.create_table('email_change_requests',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('new_email', gateway.db.models.CaseInsensitiveText(length=320), nullable=False),
    sa.Column('token_hash', sa.String(length=128), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_email_change_requests_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_email_change_requests')),
    sa.UniqueConstraint('token_hash', name=op.f('uq_email_change_requests_token_hash')),
    schema=SCHEMA
    )
    op.create_table('nodes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('mode', sa.Enum('backtest', 'sandbox', 'live', name='node_mode'), nullable=False),
    sa.Column('strategy_id', sa.String(length=128), nullable=True),
    sa.Column('status', sa.Enum('CREATED', 'RUNNING', 'STOPPED', 'ERROR', name='node_status'), server_default='CREATED', nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('stopped_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('summary', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_nodes_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_nodes')),
    schema=SCHEMA
    )
    op.create_index('ix_nodes_mode', 'nodes', ['mode'], unique=False, schema=SCHEMA)
    op.create_index('ix_nodes_status', 'nodes', ['status'], unique=False, schema=SCHEMA)
    op.create_index('ix_nodes_user_id', 'nodes', ['user_id'], unique=False, schema=SCHEMA)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['public.permissions.id'], name=op.f('fk_role_permissions_permission_id_permissions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['public.roles.id'], name=op.f('fk_role_permissions_role_id_roles'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', name=op.f('pk_role_permissions')),
    schema=SCHEMA
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['public.roles.id'], name=op.f('fk_user_roles_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_user_roles_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_user_roles')),
    schema=SCHEMA
    )
    op.create_table('watchlists',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_watchlists_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_watchlists')),
    sa.UniqueConstraint('user_id', 'name', name='uq_watchlists_user_name'),
    schema=SCHEMA
    )
    op.create_index('ix_watchlists_created_at', 'watchlists', ['created_at'], unique=False, schema=SCHEMA)
    op.create_index('ix_watchlists_user_id', 'watchlists', ['user_id'], unique=False, schema=SCHEMA)
    op.create_table('balances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('account', sa.String(length=120), nullable=False),
    sa.Column('asset', sa.String(length=64), nullable=False),
    sa.Column('free', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('locked', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_balances_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_balances')),
    sa.UniqueConstraint('node_id', 'account', 'asset', name='uq_balances_scope'),
    schema=SCHEMA
    )
    op.create_index('ix_balances_node_id', 'balances', ['node_id'], unique=False, schema=SCHEMA)
    op.create_table('configs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('source', sa.Enum('upload', 'template', 'ui', name='config_source'), nullable=False),
    sa.Column('format', sa.Enum('yaml', 'json', name='config_format'), nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_configs_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_configs')),
    sa.UniqueConstraint('node_id', 'version', name='uq_configs_node_version'),
    schema=SCHEMA
    )
    op.create_index('ix_configs_created_at', 'configs', ['created_at'], unique=False, schema=SCHEMA)
    op.create_index('ix_configs_node_id', 'configs', ['node_id'], unique=False, schema=SCHEMA)
    op.create_table('equity_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('equity', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('pnl', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_equity_history_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_equity_history')),
    sa.UniqueConstraint('node_id', 'ts', name='uq_equity_history_node_ts'),
    schema=SCHEMA
    )
    op.create_index('ix_equity_history_node_id', 'equity_history', ['node_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_equity_history_ts', 'equity_history', ['ts'], unique=False, schema=SCHEMA)
    op.create_table('logs_index',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('file_path', sa.String(length=255), nullable=False),
    sa.Column('last_offset', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_logs_index_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_logs_index')),
    sa.UniqueConstraint('node_id', 'file_path', name='uq_logs_index_path'),
    schema=SCHEMA
    )
    op.create_index('ix_logs_index_node_id', 'logs_index', ['node_id'], unique=False, schema=SCHEMA)
    op.create_table('orders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('client_order_id', sa.String(length=128), nullable=True),
    sa.Column('instrument', sa.String(length=120), nullable=False),
    sa.Column('side', sa.String(length=16), nullable=False),
    sa.Column('type', sa.String(length=16), nullable=False),
    sa.Column('tif', sa.String(length=16), nullable=True),
    sa.Column('post_only', sa.Boolean(), nullable=False),
    sa.Column('reduce_only', sa.Boolean(), nullable=False),
    sa.Column('price', sa.Numeric(precision=28, scale=8), nullable=True),
    sa.Column('qty', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('status', sa.Enum('new', 'pending', 'partially_filled', 'filled', 'canceled', 'rejected', 'expired', 'failed', name='order_status'), server_default='new', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('extra', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_orders_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders')),
    schema=SCHEMA
    )
    op.create_index('ix_orders_client_order_id', 'orders', ['client_order_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_orders_created_at', 'orders', ['created_at'], unique=False, schema=SCHEMA)
    op.create_index('ix_orders_instrument', 'orders', ['instrument'], unique=False, schema=SCHEMA)
    op.create_index('ix_orders_node_id', 'orders', ['node_id'], unique=False, schema=SCHEMA)
    op.create_table('positions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('instrument', sa.String(length=120), nullable=False),
    sa.Column('mode', sa.Enum('net', 'hedge', name='position_mode'), nullable=False),
    sa.Column('qty', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('avg_price', sa.Numeric(precision=28, scale=8), nullable=True),
    sa.Column('unrealized_pnl', sa.Numeric(precision=28, scale=8), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_positions_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_positions')),
    sa.UniqueConstraint('node_id', 'instrument', 'mode', name='uq_positions_scope'),
    schema=SCHEMA
    )
    op.create_index('ix_positions_node_id', 'positions', ['node_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_positions_updated_at', 'positions', ['updated_at'], unique=False, schema=SCHEMA)
    op.create_table('risk_alerts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=False),
    sa.Column('severity', sa.String(length=32), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('cleared_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_risk_alerts_node_id_nodes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_risk_alerts')),
    schema=SCHEMA
    )
    op.create_index('ix_risk_alerts_node_id', 'risk_alerts', ['node_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_risk_alerts_ts', 'risk_alerts', ['ts'], unique=False, schema=SCHEMA)
    op.create_table('risk_limits',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('cfg', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['public.nodes.id'], name=op.f('fk_risk_limits_node_id_nodes'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_risk_limits_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_risk_limits')),
    sa.UniqueConstraint('user_id', 'node_id', name='uq_risk_limits_scope'),
    schema=SCHEMA
    )
    op.create_index('ix_risk_limits_node_id', 'risk_limits', ['node_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_risk_limits_user_id', 'risk_limits', ['user_id'], unique=False, schema=SCHEMA)
    op.create_table('watchlist_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('watchlist_id', sa.Integer(), nullable=False),
    sa.Column('instrument', sa.String(length=120), nullable=False),
    sa.Column('added_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['watchlist_id'], ['public.watchlists.id'], name=op.f('fk_watchlist_items_watchlist_id_watchlists'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_watchlist_items')),
    sa.UniqueConstraint('watchlist_id', 'instrument', name='uq_watchlist_items_unique'),
    schema=SCHEMA
    )
    op.create_index('ix_watchlist_items_watchlist_id', 'watchlist_items', ['watchlist_id'], unique=False, schema=SCHEMA)
    op.create_table('executions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('trade_id', sa.String(length=128), nullable=False),
    sa.Column('price', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('qty', sa.Numeric(precision=28, scale=8), nullable=False),
    sa.Column('fee', sa.Numeric(precision=28, scale=8), nullable=True),
    sa.Column('ts', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('extra', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("('{}'::jsonb)"), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['public.orders.id'], name=op.f('fk_executions_order_id_orders'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_executions')),
    schema=SCHEMA
    )
    op.create_index('ix_executions_order_id', 'executions', ['order_id'], unique=False, schema=SCHEMA)
    op.create_index('ix_executions_trade_id', 'executions', ['trade_id'], unique=True, schema=SCHEMA)
    op.create_index('ix_executions_ts', 'executions', ['ts'], unique=False, schema=SCHEMA)
    # ### end Alembic commands ###


def downgrade() -> None:
    bind = op.get_bind()
    citext_available = _has_citext_extension(bind)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_executions_ts', table_name='executions', schema=SCHEMA)
    op.drop_index('ix_executions_trade_id', table_name='executions', schema=SCHEMA)
    op.drop_index('ix_executions_order_id', table_name='executions', schema=SCHEMA)
    op.drop_table('executions', schema=SCHEMA)
    op.drop_index('ix_watchlist_items_watchlist_id', table_name='watchlist_items', schema=SCHEMA)
    op.drop_table('watchlist_items', schema=SCHEMA)
    op.drop_index('ix_risk_limits_user_id', table_name='risk_limits', schema=SCHEMA)
    op.drop_index('ix_risk_limits_node_id', table_name='risk_limits', schema=SCHEMA)
    op.drop_table('risk_limits', schema=SCHEMA)
    op.drop_index('ix_risk_alerts_ts', table_name='risk_alerts', schema=SCHEMA)
    op.drop_index('ix_risk_alerts_node_id', table_name='risk_alerts', schema=SCHEMA)
    op.drop_table('risk_alerts', schema=SCHEMA)
    op.drop_index('ix_positions_updated_at', table_name='positions', schema=SCHEMA)
    op.drop_index('ix_positions_node_id', table_name='positions', schema=SCHEMA)
    op.drop_table('positions', schema=SCHEMA)
    op.drop_index('ix_orders_node_id', table_name='orders', schema=SCHEMA)
    op.drop_index('ix_orders_instrument', table_name='orders', schema=SCHEMA)
    op.drop_index('ix_orders_created_at', table_name='orders', schema=SCHEMA)
    op.drop_index('ix_orders_client_order_id', table_name='orders', schema=SCHEMA)
    op.drop_table('orders', schema=SCHEMA)
    op.drop_index('ix_logs_index_node_id', table_name='logs_index', schema=SCHEMA)
    op.drop_table('logs_index', schema=SCHEMA)
    op.drop_index('ix_equity_history_ts', table_name='equity_history', schema=SCHEMA)
    op.drop_index('ix_equity_history_node_id', table_name='equity_history', schema=SCHEMA)
    op.drop_table('equity_history', schema=SCHEMA)
    op.drop_index('ix_configs_node_id', table_name='configs', schema=SCHEMA)
    op.drop_index('ix_configs_created_at', table_name='configs', schema=SCHEMA)
    op.drop_table('configs', schema=SCHEMA)
    op.drop_index('ix_balances_node_id', table_name='balances', schema=SCHEMA)
    op.drop_table('balances', schema=SCHEMA)
    op.drop_index('ix_watchlists_user_id', table_name='watchlists', schema=SCHEMA)
    op.drop_index('ix_watchlists_created_at', table_name='watchlists', schema=SCHEMA)
    op.drop_table('watchlists', schema=SCHEMA)
    op.drop_table('user_roles', schema=SCHEMA)
    op.drop_table('role_permissions', schema=SCHEMA)
    op.drop_index('ix_nodes_user_id', table_name='nodes', schema=SCHEMA)
    op.drop_index('ix_nodes_status', table_name='nodes', schema=SCHEMA)
    op.drop_index('ix_nodes_mode', table_name='nodes', schema=SCHEMA)
    op.drop_table('nodes', schema=SCHEMA)
    op.drop_table('email_change_requests', schema=SCHEMA)
    op.drop_index('ix_backtest_results_node_key', table_name='backtest_results', schema=SCHEMA)
    op.drop_index('ix_backtest_results_dataset_id', table_name='backtest_results', schema=SCHEMA)
    op.drop_table('backtest_results', schema=SCHEMA)
    op.drop_table('auth_sessions', schema=SCHEMA)
    op.drop_index('ix_api_keys_user_id', table_name='api_keys', schema=SCHEMA)
    op.drop_index('ix_api_keys_created_at', table_name='api_keys', schema=SCHEMA)
    op.drop_table('api_keys', schema=SCHEMA)
    op.drop_table('users', schema=SCHEMA)
    op.drop_table('roles', schema=SCHEMA)
    op.drop_table('permissions', schema=SCHEMA)
    op.drop_index('ix_historical_datasets_status', table_name='historical_datasets', schema=SCHEMA)
    op.drop_index('ix_historical_datasets_fingerprint', table_name='historical_datasets', schema=SCHEMA)
    op.drop_index('ix_historical_datasets_dataset_id', table_name='historical_datasets', schema=SCHEMA)
    op.drop_index('ix_historical_datasets_created_at', table_name='historical_datasets', schema=SCHEMA)
    op.drop_table('historical_datasets', schema=SCHEMA)
    op.drop_index('ix_backtest_runs_status', table_name='backtest_runs', schema=SCHEMA)
    op.drop_index('ix_backtest_runs_run_id', table_name='backtest_runs', schema=SCHEMA)
    op.drop_table('backtest_runs', schema=SCHEMA)
    if bind.dialect.name == 'postgresql' and citext_available:
        try:
            bind.exec_driver_sql("DROP EXTENSION IF EXISTS citext")
        except ProgrammingError:
            pass
    # ### end Alembic commands ###
